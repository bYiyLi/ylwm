package com.yi.ylwm.xcb;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/xcb/xcb.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class xcb_generic_error_t extends Structure {
	/** < Type of the response */
	public byte response_type;
	/** < Error code */
	public byte error_code;
	/** < Sequence number */
	public short sequence;
	/** < Resource ID for requests with side effects only */
	public int resource_id;
	/** < Minor opcode of the failed request */
	public short minor_code;
	/** < Major opcode of the failed request */
	public byte major_code;
	public byte pad0;
	/**
	 * < Padding<br>
	 * C type : uint32_t[5]
	 */
	public int[] pad = new int[5];
	/** < full sequence */
	public int full_sequence;
	public xcb_generic_error_t() {
		super();
	}
	@Override
protected List<String> getFieldOrder(){
		return Arrays.asList("response_type", "error_code", "sequence", "resource_id", "minor_code", "major_code", "pad0", "pad", "full_sequence");
	}
	/**
	 * @param response_type < Type of the response<br>
	 * @param error_code < Error code<br>
	 * @param sequence < Sequence number<br>
	 * @param resource_id < Resource ID for requests with side effects only<br>
	 * @param minor_code < Minor opcode of the failed request<br>
	 * @param major_code < Major opcode of the failed request<br>
	 * @param pad < Padding<br>
	 * C type : uint32_t[5]<br>
	 * @param full_sequence < full sequence
	 */
	public xcb_generic_error_t(byte response_type, byte error_code, short sequence, int resource_id, short minor_code, byte major_code, byte pad0, int pad[], int full_sequence) {
		super();
		this.response_type = response_type;
		this.error_code = error_code;
		this.sequence = sequence;
		this.resource_id = resource_id;
		this.minor_code = minor_code;
		this.major_code = major_code;
		this.pad0 = pad0;
		if ((pad.length != this.pad.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad = pad;
		this.full_sequence = full_sequence;
	}
	public xcb_generic_error_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends xcb_generic_error_t implements Structure.ByReference {
		
	};
	public static class ByValue extends xcb_generic_error_t implements Structure.ByValue {
		
	};
}
